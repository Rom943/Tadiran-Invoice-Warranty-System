import React, { useState } from 'react';
import {
  List,
  Datagrid,
  TextField,
  DateField,
  Create,
  SimpleForm,
  useNotify,
  useRedirect,
  useRefresh,
  FunctionField,
  Button,
  useCreate,
  useDelete,
  Confirm,
  useRecordContext
} from 'react-admin';
import { Typography } from '@mui/material';

const DeleteKeyButton = () => {
  const record = useRecordContext();
  const notify = useNotify();
  const refresh = useRefresh();
  const [open, setOpen] = useState(false);
  const [deleteOne, { isLoading }] = useDelete();

  if (!record) return null;

  const handleDelete = () => {
    console.log('Deleting registration key:', record);
    deleteOne(
      'registrationKeys',
      { id: record.id },
      {
        onSuccess: () => {
          notify('Registration key deleted', { type: 'success' });
          refresh();
        },
        onError: (error) => {
          notify(
             'Could not delete key',
            { type: 'error' }
          );
        },
      }
    );
    setOpen(false);
  };

  // Only allow delete if not used
  const isUsed = !!(record.installer?.name || record.installerId);
  if (isUsed) return null;

  return (
    <>
      <Button
        label="Delete"
        onClick={() => setOpen(true)}
        disabled={isLoading}
        color="error"
      />
      <Confirm
        isOpen={open}
        title="Delete Registration Key"
        content="Are you sure you want to delete this unused registration key?"
        onConfirm={handleDelete}
        onClose={() => setOpen(false)}
      />
    </>
  );
};

export const RegistrationKeyList = () => (
  <List title="Registration Keys" sort={{ field: 'createdAt', order: 'DESC' }}>
    <Datagrid>
      <TextField source="id" label="ID" />
      <TextField source="key" label="Key" />
      <FunctionField
        label="Generated By Admin"
        render={record => record.admin?.name || record.adminId}
      />
      <FunctionField
        label="Used"
        render={record => (record.installer?.name || record.installerId) ? 'Yes' : 'No'}
      />
      <FunctionField
        label="Used By Installer"
        render={record => record.installer?.name || record.installerId || ''}
      />
      <DateField source="createdAt" label="Created At" showTime />
      <DateField source="updatedAt" label="Updated At" showTime />
      <DeleteKeyButton />
    </Datagrid>
  </List>
);



// Helper component for a button to trigger key generation if needed elsewhere,
// but the Create component above is the standard RA way.
export const GenerateKeyButton = () => {
  const [loading, setLoading] = useState(false);
  const notify = useNotify();
  const refresh = useRefresh(); // Import useRefresh if you want to refresh the list
  const [create, { isLoading }] = useCreate(); // isLoading can be used from the hook

  const handleClick = async () => {
    setLoading(true); // Or rely on isLoading from useCreate
    try {
      await create(
        'registrationKeys',
        { data: {} }, // Pass an empty object as data, as the backend expects no body
        {
          onSuccess: (data) => {
            notify('Registration key generated successfully!', { type: 'success' });
            refresh(); // Refresh the list of keys
            setLoading(false);
          },
          onError: (error: any) => {
            notify(`Error: ${error.message || 'Could not generate registration key'}`, { type: 'error' });
            setLoading(false);
          },
        }
      );
    } catch (error: any) { 
      console.error('Error generating registration key:', error);
      notify(`Error: ${error.message || 'Could not generate registration key'}`, { type: 'error' });
      setLoading(false);
    }
    // setLoading(false); // Ensure this is called in all paths, or use isLoading from useCreate
  };

  return <Button label="Generate New Key" onClick={handleClick} disabled={loading || isLoading} />;
};
